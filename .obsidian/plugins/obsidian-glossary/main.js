/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  GlossaryRenderer: () => GlossaryRenderer,
  default: () => ObsidianGlossary
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  glossaryFilePath: "glossary.md"
};
var ObsidianGlossary = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.glossaryVault = {};
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new SampleSettingTab(this.app, this));
      this.app.vault.on("modify", (file) => {
        if (file.path === this.settings.glossaryFilePath) {
          this.getDefinitionList(this.settings.glossaryFilePath);
        }
      });
      if (this.app.workspace.layoutReady) {
        this.init();
      } else {
        this.app.workspace.onLayoutReady(() => this.init());
      }
    });
  }
  init() {
    return __async(this, null, function* () {
      this.getDefinitionList(this.settings.glossaryFilePath);
      this.registerMarkdownPostProcessor((element, context) => {
        const codeblocks = element.querySelectorAll("p, li, span");
        for (let index = 0; index < codeblocks.length; index++) {
          const codeblock = codeblocks.item(index);
          const text = codeblock.innerText.trim();
          if (text) {
            context.addChild(new GlossaryRenderer(codeblock, this.glossaryVault));
          }
        }
      });
    });
  }
  onunload() {
  }
  getDefinitionList(glossaryFilePath) {
    return __async(this, null, function* () {
      const glossaryContent = yield this.app.vault.adapter.read(glossaryFilePath);
      if (glossaryContent) {
        this.glossaryVault = this.parseDefinitionList(glossaryContent);
      } else {
        console.warn(`No glossary file found. Create a markdown file on this path: ${glossaryFilePath}. (Editable in settings.)`);
      }
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  parseDefinitionList(text) {
    const lines = text.split("\n").filter(Boolean);
    const glossaryDefinitionMarkers = [" ", "	", ":", "|"];
    let currentPhrase = "";
    const result = lines.reduce((acc, line) => {
      if (glossaryDefinitionMarkers.includes(line[0])) {
        acc[currentPhrase].push(line.substring(1).trim());
        acc[currentPhrase] = acc[currentPhrase].filter(Boolean);
      } else {
        currentPhrase = line;
        acc[line] = [];
      }
      return acc;
    }, {
      "": []
    });
    delete result[""];
    return result;
  }
};
var GlossaryRenderer = class extends import_obsidian.MarkdownRenderChild {
  constructor(containerEl, glossary) {
    super(containerEl);
    this.containerEl = containerEl;
    this.glossary = glossary;
  }
  onload() {
    const origContent = this.containerEl.innerHTML;
    let newContent = origContent;
    Object.keys(this.glossary).forEach((key) => {
      if (newContent.indexOf(key) > -1) {
        const title = this.glossary[key].join("\n");
        newContent = newContent.split(key).join(`<span class="obsidian-glossary-item" title="${title}">${key}</span>`);
      }
    });
    if (newContent !== origContent) {
      const span = document.createElement("SPAN");
      span.innerHTML = newContent;
      this.containerEl.replaceWith(span);
    }
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.glossaryFilePath).onChange((value) => __async(this, null, function* () {
      console.log("Secret: " + value);
      this.plugin.settings.glossaryFilePath = value;
      yield this.plugin.saveSettings();
    })));
  }
};
//# sourceMappingURL=data:application/json;base64,
